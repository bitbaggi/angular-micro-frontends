import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { ApplicationInsights } from "@microsoft/applicationinsights-web";
import * as i0 from "@angular/core";
var SharedMfe = /** @class */ (function () {
    function SharedMfe() {
        var _this = this;
        this.registeredMfes = new Map();
        this.setUserId = function (userId) {
            _this.insights.context.user.id = userId;
            _this.insights.setAuthenticatedUserContext(userId);
        };
        this.logEvent = function (trackingEvent) { return _this.insights.trackEvent({
            name: trackingEvent.trackingEvent,
            properties: trackingEvent.properties
        }); };
    }
    SharedMfe.prototype.registerMfe = function (name, type) {
        console.log("Registering " + name);
        this.registeredMfes.set(name, type);
        console.log("Total registered: " + this.registeredMfes.size);
    };
    SharedMfe.prototype.initInsights = function (config) {
        this.insights = new ApplicationInsights({
            config: { instrumentationKey: config.instrumentationKey }
        });
        this.insights.loadAppInsights();
    };
    SharedMfe.ɵprov = i0.ɵɵdefineInjectable({ factory: function SharedMfe_Factory() { return new SharedMfe(); }, token: SharedMfe, providedIn: "platform" });
    SharedMfe = __decorate([
        Injectable({ providedIn: 'platform' })
    ], SharedMfe);
    return SharedMfe;
}());
export { SharedMfe };
var TrackingEvent = /** @class */ (function () {
    function TrackingEvent() {
    }
    return TrackingEvent;
}());
export { TrackingEvent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmVkLm1mZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bhbmd1bGFyLW1mZS9zaGFyZWQvIiwic291cmNlcyI6WyJzaGFyZWQubWZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFPLE1BQU0sZUFBZSxDQUFDO0FBQy9DLE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLG9DQUFvQyxDQUFDOztBQUd2RTtJQUFBO1FBQUEsaUJBOEJDO1FBN0JXLG1CQUFjLEdBQUcsSUFBSSxHQUFHLEVBQXFCLENBQUM7UUFtQnRELGNBQVMsR0FBRyxVQUFDLE1BQWM7WUFDdkIsS0FBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxNQUFNLENBQUM7WUFDdkMsS0FBSSxDQUFDLFFBQVEsQ0FBQywyQkFBMkIsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN0RCxDQUFDLENBQUM7UUFFRixhQUFRLEdBQUcsVUFBQyxhQUE0QixJQUFLLE9BQUEsS0FBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUM7WUFDbEUsSUFBSSxFQUFFLGFBQWEsQ0FBQyxhQUFhO1lBQ2pDLFVBQVUsRUFBRSxhQUFhLENBQUMsVUFBVTtTQUN2QyxDQUFDLEVBSDJDLENBRzNDLENBQUE7S0FFTDtJQTNCVSwrQkFBVyxHQUFsQixVQUFtQixJQUFZLEVBQUUsSUFBZTtRQUM1QyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFlLElBQU0sQ0FBQyxDQUFDO1FBQ25DLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNwQyxPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUFxQixJQUFJLENBQUMsY0FBYyxDQUFDLElBQU0sQ0FBQyxDQUFBO0lBQ2hFLENBQUM7SUFNTSxnQ0FBWSxHQUFuQixVQUFvQixNQUFzQztRQUN0RCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksbUJBQW1CLENBQUM7WUFDcEMsTUFBTSxFQUFFLEVBQUMsa0JBQWtCLEVBQUUsTUFBTSxDQUFDLGtCQUFrQixFQUFDO1NBQzFELENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDcEMsQ0FBQzs7SUFsQlEsU0FBUztRQURyQixVQUFVLENBQUMsRUFBQyxVQUFVLEVBQUUsVUFBVSxFQUFDLENBQUM7T0FDeEIsU0FBUyxDQThCckI7b0JBbENEO0NBa0NDLEFBOUJELElBOEJDO1NBOUJZLFNBQVM7QUFnQ3RCO0lBQUE7SUFHQSxDQUFDO0lBQUQsb0JBQUM7QUFBRCxDQUFDLEFBSEQsSUFHQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZSwgVHlwZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7QXBwbGljYXRpb25JbnNpZ2h0c30gZnJvbSBcIkBtaWNyb3NvZnQvYXBwbGljYXRpb25pbnNpZ2h0cy13ZWJcIjtcclxuXHJcbkBJbmplY3RhYmxlKHtwcm92aWRlZEluOiAncGxhdGZvcm0nfSlcclxuZXhwb3J0IGNsYXNzIFNoYXJlZE1mZSB7XHJcbiAgICBwcml2YXRlIHJlZ2lzdGVyZWRNZmVzID0gbmV3IE1hcDxzdHJpbmcsIFR5cGU8YW55Pj4oKTtcclxuXHJcbiAgICBwdWJsaWMgcmVnaXN0ZXJNZmUobmFtZTogc3RyaW5nLCB0eXBlOiBUeXBlPGFueT4pIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhgUmVnaXN0ZXJpbmcgJHtuYW1lfWApO1xyXG4gICAgICAgIHRoaXMucmVnaXN0ZXJlZE1mZXMuc2V0KG5hbWUsIHR5cGUpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGBUb3RhbCByZWdpc3RlcmVkOiAke3RoaXMucmVnaXN0ZXJlZE1mZXMuc2l6ZX1gKVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvLyBBRERFRCBUSEVTRSBMSU5FU1xyXG4gICAgcHJpdmF0ZSBpbnNpZ2h0czogQXBwbGljYXRpb25JbnNpZ2h0cztcclxuXHJcbiAgICBwdWJsaWMgaW5pdEluc2lnaHRzKGNvbmZpZzogeyBpbnN0cnVtZW50YXRpb25LZXk6IHN0cmluZyB9KSB7XHJcbiAgICAgICAgdGhpcy5pbnNpZ2h0cyA9IG5ldyBBcHBsaWNhdGlvbkluc2lnaHRzKHtcclxuICAgICAgICAgICAgY29uZmlnOiB7aW5zdHJ1bWVudGF0aW9uS2V5OiBjb25maWcuaW5zdHJ1bWVudGF0aW9uS2V5fVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuaW5zaWdodHMubG9hZEFwcEluc2lnaHRzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0VXNlcklkID0gKHVzZXJJZDogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgdGhpcy5pbnNpZ2h0cy5jb250ZXh0LnVzZXIuaWQgPSB1c2VySWQ7XHJcbiAgICAgICAgdGhpcy5pbnNpZ2h0cy5zZXRBdXRoZW50aWNhdGVkVXNlckNvbnRleHQodXNlcklkKTtcclxuICAgIH07XHJcblxyXG4gICAgbG9nRXZlbnQgPSAodHJhY2tpbmdFdmVudDogVHJhY2tpbmdFdmVudCkgPT4gdGhpcy5pbnNpZ2h0cy50cmFja0V2ZW50KHtcclxuICAgICAgICBuYW1lOiB0cmFja2luZ0V2ZW50LnRyYWNraW5nRXZlbnQsXHJcbiAgICAgICAgcHJvcGVydGllczogdHJhY2tpbmdFdmVudC5wcm9wZXJ0aWVzXHJcbiAgICB9KVxyXG4gICAgLy8gIUFEREVEIFRIRVNFIExJTkVTXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBUcmFja2luZ0V2ZW50IGltcGxlbWVudHMgVHJhY2tpbmdFdmVudCB7XHJcbiAgICB0cmFja2luZ0V2ZW50OiBzdHJpbmc7XHJcbiAgICBwcm9wZXJ0aWVzOiB7IFtwcm9wTmFtZTogc3RyaW5nXTogc3RyaW5nIHwgbnVtYmVyIHwgRGF0ZSB8IGJvb2xlYW4gfTtcclxufVxyXG4iXX0=