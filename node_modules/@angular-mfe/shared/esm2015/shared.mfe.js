import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { ApplicationInsights } from "@microsoft/applicationinsights-web";
import * as i0 from "@angular/core";
let SharedMfe = class SharedMfe {
    constructor() {
        this.registeredMfes = new Map();
        this.setUserId = (userId) => {
            this.insights.context.user.id = userId;
            this.insights.setAuthenticatedUserContext(userId);
        };
        this.logEvent = (trackingEvent) => this.insights.trackEvent({
            name: trackingEvent.trackingEvent,
            properties: trackingEvent.properties
        });
    }
    registerMfe(name, type) {
        console.log(`Registering ${name}`);
        this.registeredMfes.set(name, type);
        console.log(`Total registered: ${this.registeredMfes.size}`);
    }
    initInsights(config) {
        this.insights = new ApplicationInsights({
            config: { instrumentationKey: config.instrumentationKey }
        });
        this.insights.loadAppInsights();
    }
};
SharedMfe.ɵprov = i0.ɵɵdefineInjectable({ factory: function SharedMfe_Factory() { return new SharedMfe(); }, token: SharedMfe, providedIn: "platform" });
SharedMfe = __decorate([
    Injectable({ providedIn: 'platform' })
], SharedMfe);
export { SharedMfe };
export class TrackingEvent {
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmVkLm1mZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bhbmd1bGFyLW1mZS9zaGFyZWQvIiwic291cmNlcyI6WyJzaGFyZWQubWZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFPLE1BQU0sZUFBZSxDQUFDO0FBQy9DLE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLG9DQUFvQyxDQUFDOztBQUd2RSxJQUFhLFNBQVMsR0FBdEIsTUFBYSxTQUFTO0lBQXRCO1FBQ1ksbUJBQWMsR0FBRyxJQUFJLEdBQUcsRUFBcUIsQ0FBQztRQW1CdEQsY0FBUyxHQUFHLENBQUMsTUFBYyxFQUFFLEVBQUU7WUFDM0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxNQUFNLENBQUM7WUFDdkMsSUFBSSxDQUFDLFFBQVEsQ0FBQywyQkFBMkIsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN0RCxDQUFDLENBQUM7UUFFRixhQUFRLEdBQUcsQ0FBQyxhQUE0QixFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQztZQUNsRSxJQUFJLEVBQUUsYUFBYSxDQUFDLGFBQWE7WUFDakMsVUFBVSxFQUFFLGFBQWEsQ0FBQyxVQUFVO1NBQ3ZDLENBQUMsQ0FBQTtLQUVMO0lBM0JVLFdBQVcsQ0FBQyxJQUFZLEVBQUUsSUFBZTtRQUM1QyxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNuQyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDcEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFBO0lBQ2hFLENBQUM7SUFNTSxZQUFZLENBQUMsTUFBc0M7UUFDdEQsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLG1CQUFtQixDQUFDO1lBQ3BDLE1BQU0sRUFBRSxFQUFDLGtCQUFrQixFQUFFLE1BQU0sQ0FBQyxrQkFBa0IsRUFBQztTQUMxRCxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQ3BDLENBQUM7Q0FZSixDQUFBOztBQTlCWSxTQUFTO0lBRHJCLFVBQVUsQ0FBQyxFQUFDLFVBQVUsRUFBRSxVQUFVLEVBQUMsQ0FBQztHQUN4QixTQUFTLENBOEJyQjtTQTlCWSxTQUFTO0FBZ0N0QixNQUFNLE9BQU8sYUFBYTtDQUd6QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZSwgVHlwZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7QXBwbGljYXRpb25JbnNpZ2h0c30gZnJvbSBcIkBtaWNyb3NvZnQvYXBwbGljYXRpb25pbnNpZ2h0cy13ZWJcIjtcclxuXHJcbkBJbmplY3RhYmxlKHtwcm92aWRlZEluOiAncGxhdGZvcm0nfSlcclxuZXhwb3J0IGNsYXNzIFNoYXJlZE1mZSB7XHJcbiAgICBwcml2YXRlIHJlZ2lzdGVyZWRNZmVzID0gbmV3IE1hcDxzdHJpbmcsIFR5cGU8YW55Pj4oKTtcclxuXHJcbiAgICBwdWJsaWMgcmVnaXN0ZXJNZmUobmFtZTogc3RyaW5nLCB0eXBlOiBUeXBlPGFueT4pIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhgUmVnaXN0ZXJpbmcgJHtuYW1lfWApO1xyXG4gICAgICAgIHRoaXMucmVnaXN0ZXJlZE1mZXMuc2V0KG5hbWUsIHR5cGUpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGBUb3RhbCByZWdpc3RlcmVkOiAke3RoaXMucmVnaXN0ZXJlZE1mZXMuc2l6ZX1gKVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvLyBBRERFRCBUSEVTRSBMSU5FU1xyXG4gICAgcHJpdmF0ZSBpbnNpZ2h0czogQXBwbGljYXRpb25JbnNpZ2h0cztcclxuXHJcbiAgICBwdWJsaWMgaW5pdEluc2lnaHRzKGNvbmZpZzogeyBpbnN0cnVtZW50YXRpb25LZXk6IHN0cmluZyB9KSB7XHJcbiAgICAgICAgdGhpcy5pbnNpZ2h0cyA9IG5ldyBBcHBsaWNhdGlvbkluc2lnaHRzKHtcclxuICAgICAgICAgICAgY29uZmlnOiB7aW5zdHJ1bWVudGF0aW9uS2V5OiBjb25maWcuaW5zdHJ1bWVudGF0aW9uS2V5fVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuaW5zaWdodHMubG9hZEFwcEluc2lnaHRzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0VXNlcklkID0gKHVzZXJJZDogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgdGhpcy5pbnNpZ2h0cy5jb250ZXh0LnVzZXIuaWQgPSB1c2VySWQ7XHJcbiAgICAgICAgdGhpcy5pbnNpZ2h0cy5zZXRBdXRoZW50aWNhdGVkVXNlckNvbnRleHQodXNlcklkKTtcclxuICAgIH07XHJcblxyXG4gICAgbG9nRXZlbnQgPSAodHJhY2tpbmdFdmVudDogVHJhY2tpbmdFdmVudCkgPT4gdGhpcy5pbnNpZ2h0cy50cmFja0V2ZW50KHtcclxuICAgICAgICBuYW1lOiB0cmFja2luZ0V2ZW50LnRyYWNraW5nRXZlbnQsXHJcbiAgICAgICAgcHJvcGVydGllczogdHJhY2tpbmdFdmVudC5wcm9wZXJ0aWVzXHJcbiAgICB9KVxyXG4gICAgLy8gIUFEREVEIFRIRVNFIExJTkVTXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBUcmFja2luZ0V2ZW50IGltcGxlbWVudHMgVHJhY2tpbmdFdmVudCB7XHJcbiAgICB0cmFja2luZ0V2ZW50OiBzdHJpbmc7XHJcbiAgICBwcm9wZXJ0aWVzOiB7IFtwcm9wTmFtZTogc3RyaW5nXTogc3RyaW5nIHwgbnVtYmVyIHwgRGF0ZSB8IGJvb2xlYW4gfTtcclxufVxyXG4iXX0=